stages:
  - test
  - report

variables:
  # Variables pour Robot Framework
  ROBOT_OUTPUT_DIR: "results"
  ROBOT_REPORTS_DIR: "reports"
  XRAY_TEST_PLAN_KEY: "SCRUM-30"  # Votre test plan existant

  # Variables pour Xray (à configurer dans GitLab CI/CD Variables)
  # XRAY_CLIENT_ID: "votre-client-id"
  # XRAY_CLIENT_SECRET: "votre-client-secret"
  # XRAY_BASE_URL: "https://xray.cloud.getxray.app/api/v1"
  # JIRA_PROJECT_KEY: "votre-projet-key"

# Cache pour les dépendances Python
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python3 --version
  - pip3 --version

# Job pour exécuter les tests Robot Framework
robot_tests:
  stage: test
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y wget gnupg2 unzip curl ca-certificates
    # Installation de Chrome pour les tests web (méthode moderne)
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg
    - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
    - apt-get update && apt-get install -y google-chrome-stable
    # Installation de ChromeDriver (méthode moderne)
    - CHROME_DRIVER_VERSION=$(curl -sS https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE)
    - wget -N https://storage.googleapis.com/chrome-for-testing-public/$CHROME_DRIVER_VERSION/linux64/chromedriver-linux64.zip
    - unzip chromedriver-linux64.zip
    - chmod +x chromedriver-linux64/chromedriver
    - mv chromedriver-linux64/chromedriver /usr/local/bin/
    # Installation des dépendances Python
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install robotframework
    - pip install robotframework-seleniumlibrary
    - pip install robotframework-requests
    - pip install robotframework-jsonlibrary
    - pip install requests
    # Ajouter d'autres dépendances selon vos besoins
    - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  script:
    - source venv/bin/activate
    - mkdir -p $ROBOT_OUTPUT_DIR
    # Exécution des tests Robot Framework
    - robot
      --outputdir $ROBOT_OUTPUT_DIR
      --output output.xml
      --log log.html
      --report report.html
      --xunit junit.xml
      --variable BROWSER:headlesschrome
      --variable HEADLESS:True
      --loglevel INFO
      tests/ || true  # Continue même si des tests échouent
  artifacts:
    when: always
    paths:
      - $ROBOT_OUTPUT_DIR/
    reports:
      junit: $ROBOT_OUTPUT_DIR/junit.xml
    expire_in: 30 days
  allow_failure: true

# Job optionnel pour générer un rapport consolidé
generate_report:
  stage: report
  image: python:3.9-slim
  dependencies:
    - robot_tests
  before_script:
    - pip install robotframework
  script:
    - |
      python3 -m robot.rebot \
        --outputdir "$ROBOT_REPORTS_DIR" \
        --output final_output.xml \
        --log final_log.html \
        --report final_report.html \
        "$ROBOT_OUTPUT_DIR/output.xml" || true
  artifacts:
    paths:
      - $ROBOT_REPORTS_DIR/
    expire_in: 30 days
  when: always